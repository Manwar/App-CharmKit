# PODNAME: App::CharmKit::Manual::GettingStarted
# ABSTRACT: Getting started with CharmKit

__END__

=head1 Getting Started

=head2 Creating a project

All development happens within B<src/> and the builtin C<pack> command
is used for generating the proper hooks/tests and dependencies within that
directory so Juju is able to act upon them. Hooks within B<hooks/> directory
are always overwritten, think of this similar to a B<dist> or B<release> directory.

To start a project:

  $ charmkit init [--with-hooks] <charm-name>

If used C<--with-hooks> then B<src/hooks/> will be populated with all the default
hooks. A few questions will be prompted and then the project is generated with
B<config.yaml, metadata.yaml, LICENSE, and README.md>.

=head2 Directory Layout

Once a project is created the structure of your project should look similar to:

  charm-project/
    hooks/
      install
      config-changed
      start
      stop
    src/
      hooks/
        install
        config-changed
        start
        stop
      tests/
        00-basic.test
    tests/
      00-basic.test
    config.yaml
    metadata.yaml
    LICENSE
    README.md

=head2 Creating hooks

By default CharmKit allows the creation of a set of default unit hooks.
Those hooks are B<install, config-changed, start, upgrade-charm, stop>.

  $ charmkit generate upgrade-charm

Or you can generate all known default unit hooks:

  $ charmkit generate -a

A special relation hook can be created with the C<-r> option:

  $ charmkit generate -r database-relation-joined

=head2 Writing charm hooks

Hooks are written using perl with automatically imported helpers for convenience.
When developing hooks they should reside in B<src/hooks>.

A typical hook starts with

   #!/usr/bin/env perl

   use charm -logging;

   log 'Starting install hook for database';
   my $dbhost = relation_get 'dbhost';
   my $dbuser = relation_get 'dbuser';

=head2 Writing charm tests

Tests are written in the same way and should live in B<src/tests/*.test>.

A typical test starts with

   #!/usr/bin/env perl

   use charm -tester, -sys;

   # See if an nginx config file exists
   ok -e '/etc/nginx/sites-enabled/mysite.com';

   my $cmd = ['service', 'nginx', 'status'];
   my $ret = execute($cmd);
   ok $ret->{error} eq 0;

   # finish tests
   done_testing;

Tests are built in a way that the test runner from the charm reviewers will be
able to run and validate your charm. The tests can be executed calling them directly
(how the test runner does it) or running with:

   $ prove tests/*.test

=head2 Packaging a charm fo release

Once development is complete and you have your hooks defined and tests written.
Packaging a charm for release to either Git or the Charm Store is a matter of running:

  $ charmkit pack

=cut
